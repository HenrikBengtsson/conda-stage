#! /usr/bin/env bash
### conda-stage: Stage Conda Environment on Local Disk
### 
### Usage:
###  conda-stage [options]
### 
### Options:  
###  --help                  Display the full help page with examples
###  --version               Output version of this software
###  --debug                 Output detailed debug information
###  --verbose               Output informative message
###  --quiet                 Silence all output
###  --force                 Force an action, e.g. repacking environment
###  --source                Generate conda-stage() shell function
###  --ignore-missing-files  Passed to 'conda-pack' as-is
###  --writable              Make the staged environment writable
###  --auto-stage=<cmd>      'enable' or 'disable' automatic staging when
###                          activating the original Conda environment
###  --auto-unstage=<cmd>    'enable' or 'disable' automatic unstaging when
###                          deactivating the staged Conda environment
###  --path=<path>           Directory where Conda environment should be
###                          staged (Default: `mktemp -d`)
###  --pack                  Package up a Conda environment
###  --stage                 Stage a Conda environment
###  --unstage               Unstage and remove staged environment
### ---
###
### Examples:
###
###  conda-stage --help
###  conda-stage --version
###  conda-stage --version --full
###
###  ## Enable auto-staging
###  conda-stage --auto-stage=enable
###  conda activate myenv
###  conda deactivate
###
###  ## Disable auto-staging
###  CONDA_STAGE=false conda activate myenv
###  conda-stage --auto-stage=disable
###  conda deactivate
###
###  ## Repack environment after updating or install new software
###  conda-stage --pack --force
###
###  ## Manual staging: Bash only
###  eval "$(conda-stage --source)"
###  conda activate myenv
###  conda-stage --stage
###
###  ## Manual staging: Other shells
###  conda activate myenv
###  stage_path=$(mktemp -d)
###  conda-stage --stage --path="${stage_path}"
###  source "${stage_path}/bin/activate"
###
### Version: 0.6.1
### Copyright: Henrik Bengtsson (2022)
### License: ISC

this="${BASH_SOURCE%/}"
[[ -L "${this}" ]] && this=$(readlink "${this}")

## Import bash utility functions
incl="$(dirname "${this}")/incl"

# shellcheck source=incl/asserts.sh
source "${incl}/asserts.sh"
# shellcheck source=incl/cli.sh
source "${incl}/cli.sh"
# shellcheck source=incl/conditions.sh
source "${incl}/conditions.sh"
# shellcheck source=incl/files.sh
source "${incl}/files.sh"
# shellcheck source=incl/output.sh
source "${incl}/output.sh"
# shellcheck source=incl/ports.sh
source "${incl}/ports.sh"
# shellcheck source=incl/system.sh
source "${incl}/system.sh"


# =========================================================================
# Utility functions
# =========================================================================

function assert_conda {
    if ! command -v conda &> /dev/null; then
        merror "Executable 'conda' not found"
    fi
}

function conda_version {
    local res
    res=$(conda --version 2> /dev/null)
    # shellcheck disable=SC2181
    [[ $? -eq 0 ]] || return 1
    sed -E 's/^conda[[:space:]]+//' <<< "${res}"
}    

function conda_pack_version {
    local res
    res=$(conda-pack --version 2> /dev/null)
    # shellcheck disable=SC2181
    [[ $? -eq 0 ]] || return 1
    sed -E 's/^conda-pack[[:space:]]+//' <<< "${res}"
}    


function conda_pack_cache_file {
    local path
    
    mdebug "- CONDA_PREFIX=${CONDA_PREFIX}"
    assert_dir_exists "${CONDA_PREFIX}"
    path=$(dirname "${CONDA_PREFIX}")
    mdebug "- Stage cache path: ${path}"
    assert_dir_exists "${path}"

    echo "${path}/${CONDA_DEFAULT_ENV}.tar.gz"
}


function assert_active_conda_environment {
    if [[ -z ${CONDA_DEFAULT_ENV} ]]; then
        merror "No active Conda environment, e.g. 'conda activate <name>'"
    fi
}


function is_conda_pack_cache_file_uptodate {
    local file
    local file_export
    local tf

    mdebug "is_conda_pack_cache_file_uptodate() ..."
    
    file=$(conda_pack_cache_file)
    file_export=${file%.tar.gz}.export
    mdebug "- conda-pack tarball: ${file}"
    mdebug "- conda-pack export: ${file_export}"
    if [[ ! -f "${file}" ]]; then
        mdebug "- conda-pack tarball not up-to-date, because it's missing"
        return 1
    elif [[ ! -f "${file_export}" ]]; then
        mdebug "- conda-pack tarball not up-to-date, because it's \"export\" file missing"
        return 1
    else
        assert_active_conda_environment
        mdebug "- Current Conda environment: ${CONDA_DEFAULT_ENV}"
        
        tf=$(mktemp)
        conda list --export > "${tf}"
        if ! cmp --silent "${file_export}" "${tf}"; then
            mdebug "- conda-pack tarball not up-to-date, because it's \"export\" does not match 'conda list --export'"
            rm "${tf}"
            return 1
        else
            rm "${tf}"
        fi
    fi

    mdebug "- conda-pack tarball is up-to-date"

    return 0
}


function conda_pack {
    local opts
    local file
    local file_export
    local tmp_tarball
    local t0
    local dt
    
    assert_active_conda_environment
    mdebug "- Current Conda environment: ${CONDA_DEFAULT_ENV}"

    ## Assert that environment is not already staged
    if [[ -f "${CONDA_PREFIX}/.conda-stage" ]]; then
         merror "Conda environment is already staged and active: ${CONDA_PREFIX}"
    fi
    
    assert_conda
    mdebug "- Using conda $(conda_version)"

    ## Install conda-pack?
    if ! command -v conda-pack &> /dev/null; then
        t0=$SECONDS
        minfo "[ONCE] Installing conda-pack, because it was missing ..."
        opts=("--yes")
        if ! $verbose; then
            opts+=("--quiet")
        fi
        mdebug "Additional 'conda install' options: ${opts[*]}"
        ## WORKAROUND: 'conda install' outputs some "progress" to stdout, not
        ## stderr (https://github.com/HenrikBengtsson/conda-stage/issues/15)
        ## Because of this, we direct stdout to stderr here.
        ## WORKAROUND 2: conda install --quiet does _not_ silence its stdout
        ## output, which means we have to redirect everything to /dev/null
        ## if verbose=false.
        if $verbose; then
            1>&2 CONDA_STAGE=false conda install "${opts[@]}" --channel=conda-forge conda-pack
        else
            CONDA_STAGE=false conda install "${opts[@]}" --channel=conda-forge conda-pack &> /dev/null
        fi
        dt=$((SECONDS - t0))
        minfo "Total installation time: ${dt} seconds"

        ## Assert installation was successful
        if ! command -v conda-pack &> /dev/null; then
            merror "Failed to install 'conda-pack'"
        fi
    fi
    mdebug "- Using conda-pack $(conda_pack_version)"

    file=$(conda_pack_cache_file)
    file_export=${file%.tar.gz}.export
    mdebug "- conda-pack tarball: ${file}"
    mdebug "- conda-pack export: ${file_export}"

    ## Skip existing conda-pack file?
    if $force && [[ -f "${file}" ]]; then
        mdebug "Removing existing conda-pack file: ${file}"
        rm -f "${file}"
    fi

    ## Create conda-pack file?
    if [[ ! -f "${file}" ]]; then
        t0=$SECONDS
        minfo "[ONCE] Packaging Conda environment, because it hasn't been done before ..."
        mdebug "Additional 'conda-pack' options: ${opts[*]}"
        ## ROBUSTNESS: Have 'conda-pack' produce the tarball atomically by
        ## writing to a temporary file which is renamed on success.  Since
        ## 'conda-pack' looks at the filename extension, we can just append
        ## '.tmp' at the end, because that'll be an error. Instead, we
        ## prepend '.tmp.' to the basename.
        tmp_tarball=$(dirname "${file}")/.tmp.$(basename "${file}")
        
        ## WORKAROUND: conda-pack outputs "progress" to stdout, not stderr
        ## (https://github.com/conda/conda-pack/issues/217). Because of this,
        ## we direct stdout to stderr here.
        1>&2 conda-pack "${conda_pack_opts[@]}" --output="${tmp_tarball}"

        conda list --export > "${file_export}"
        
        mv "${tmp_tarball}" "${file}"
        
        dt=$((SECONDS - t0))
        minfo "Total 'conda-pack' time: ${dt} seconds"
    fi
    mdebug "- Packaged Conda environment: $(file_info "${file}")"
    assert_file_exists "${file}"
    
    echo "${file}"
}

function file_info {
    assert_file_exists "${1:?}"
    stat -t --printf "%n (%s bytes; %y)" "$1"
}

# =========================================================================
# MAIN
# =========================================================================
action=
debug=${CONDA_STAGE_DEBUG:-false}
force=false
verbose=${CONDA_STAGE_VERBOSE:-true}
full=false
path=${CONDA_STAGE_PATH}
writable=${CONDA_STAGE_WRITABLE:-false}
autostage=
autounstage=
conda_pack_opts=()

# Parse command-line options
while [[ $# -gt 0 ]]; do
    mdebug "Next CLI argument: $1"
    ## Options (--flags):
    if [[ "$1" == "--help" ]]; then
        action=help
        full=true
    elif [[ "$1" == "--version" ]]; then
        action=version
    elif [[ "$1" == "--full" ]]; then
        full=true
    elif [[ "$1" == "--debug" ]]; then
        debug=true
    elif [[ "$1" == "--quiet" ]]; then
        verbose=false
        conda_pack_opts+=("$1")
    elif [[ "$1" == "--force" ]]; then
        force=true
    elif [[ "$1" == "--source" ]]; then
        action=source
    elif [[ "$1" == "--writable" ]]; then
        writable=true
    elif [[ "$1" == "--stage" ]]; then
        action=stage
    elif [[ "$1" == "--unstage" ]]; then
        action=unstage
    elif [[ "$1" == "--pack" ]]; then
        action=pack
    elif [[ "$1" == "--ignore-missing-files" ]]; then
        conda_pack_opts+=("$1")
    ## Options (--key=value):
    elif [[ "$1" =~ ^--.*=.*$ ]]; then
        key=${1//--}
        key=${key//=*}
        value=${1//--[[:alpha:]]*=}
        mdebug "Key-value option '$1' parsed to key='${key}', value='${value}'"
        if [[ -z ${value} ]]; then
            merror "Option '--${key}' must not be empty"
        fi
        if [[ "${key}" == "path" ]]; then
            path=${value}
        elif [[ "${key}" == "auto-stage" ]]; then
            action=automate
            if [[ ${value} == "enable" ]]; then
                autostage=enable
            elif [[ ${value} == "disable" ]]; then
                autostage=disable
            else
                merror "Unknown value of option '--${key}=${value}'"
            fi
            ## If not already set, set 'autounstage' accordingly. 
            if [[ -z ${autounstage} ]]; then
                autounstage=${autostage}
            fi                          
        elif [[ "${key}" == "auto-unstage" ]]; then
            action=automate
            if [[ ${value} == "enable" ]]; then
                autounstage=enable
            elif [[ ${value} == "disable" ]]; then
                autounstage=disable
            else
                merror "Unknown value of option '--${key}=${value}'"
            fi
        else
            merror "Unknown option: $1"
        fi
    else
        merror "Unknown option: $1"
    fi
    shift
done


if [[ -z $action ]]; then
    action=help
    full=false
fi

## Log action to file?
if [[ -n ${CONDA_STAGE_LOGFILE} ]]; then
    echo "action: $action" > "${CONDA_STAGE_LOGFILE}"
fi

## --help should always be available prior to any validation errors
if [[ $action == "help" ]]; then
    if $full; then
        help full
    else
        help
    fi
    _exit 0
elif [[ $action == "version" ]]; then
    if $full; then
        echo "conda-stage: $(version)"
        echo "conda: $(conda_version || echo "<please install Miniconda or Anaconda>")"
    else
        version
    fi
    _exit 0
fi


# -------------------------------------------------------------------------
# Validate options
# -------------------------------------------------------------------------


# -------------------------------------------------------------------------
# Initiate
# -------------------------------------------------------------------------
mdebug "action: ${action}"
mdebug "debug: ${debug}"
mdebug "verbose: ${verbose}"
mdebug "force: ${force}"
mdebug "conda_pack_opts: [n=${#conda_pack_opts[@]}] ${conda_pack_opts[*]}"
mdebug "full: ${full}"
mdebug "path: ${path}"
mdebug "writable: ${writable}"
mdebug "autostage: ${autostage}"
mdebug "autounstage: ${autounstage}"

CONDA_STAGE_DEBUG=${debug}

if [[ "${action}" == "source" ]]; then
    file="$(dirname "${this}")/conda-stage.sh"
    assert_file_exists "$file"
    cat "${file}"
    exit 0
fi

if [[ "${action}" == "pack" ]]; then
    minfo "Package current Conda environment (${CONDA_PREFIX}) to cache ..."
    mdebug "- Using conda-stage $(version)"

    ## Already done?
    file=$(conda_pack_cache_file)
    if ! $force && [[ -f "${file}" ]]; then
        if is_conda_pack_cache_file_uptodate; then
            mdebug "conda-pack file exists and is up to date: ${file}"
            merror "Package tarball already exists. Use --force to recreate: ${file}"
        else
            mdebug "conda-pack file exists, but is out to date: ${file}"
            minfo "Removing out-of-date package tarball ($(file_info "${file}"))"
            force=true
        fi
    fi
    
    conda_pack_cache_file=$(conda_pack)
    exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        exit "$exit_code"
    fi
    
    minfo "Created conda-pack tarball: ${conda_pack_cache_file}"
    exit 0
fi

if [[ "${action}" == "automate" ]]; then
    minfo "Configuring automatic staging and unstaging of original Conda environment  ..."
    assert_active_conda_environment

    if [[ -n ${autostage} ]]; then
      if [[ -f "${CONDA_PREFIX}/.conda-stage" ]]; then
          merror "Cannot configure auto-staging of a staged environment. Call 'conda-stage --unstage' first"
      fi
      
      mdebug "- autostage=${autostage}"

      ## Warn about pkgs/ in Conda environment
      ## https://github.com/conda/conda-pack/issues/112
      if [[ -d "${CONDA_PREFIX}/pkgs/" ]]; then
          mwarn "Detected a pkgs/ folder *local* to the Conda environment, which is unusal. That folder will *not* be staged to local disk, cf. https://github.com/conda/conda-pack/issues/112: ${CONDA_PREFIX}/pkgs/"
      fi
      
      path=${CONDA_PREFIX}/etc/conda/activate.d
      mdebug "- path=${path}"
      
      ## Based on observations, 'conda activate' processes
      ## activate.d/* scripts in lexicographic order.
      file=${path}/zzz.conda-stage-auto.sh
      mdebug "- file=${file}"
  
      if [[ "${autostage}" == "enable" ]]; then
          mdebug "- writable=${writable}"
          opts=()
          if $writable; then
              opts+=("--writable")
          fi
          make_dir "${path}"
  
          cat > "${file}" << EOF
## Disabled?
\${CONDA_STAGE:-true} || return 0

## Prevent automatic staging after deactivation of staged environment
if \${CONDA_STAGE_AUTOSTAGED:-false}; then
    unset CONDA_STAGE_AUTOSTAGED
    return 0
fi
[[ -n \${CONDA_STAGE_ACTION} ]] && return 0

\${CONDA_STAGE_DEBUG:-false} && >&2 echo "${file} ..."

if command -v conda-stage > /dev/null; then
    \${CONDA_STAGE_DEBUG:-false} && >&2 echo "Auto-staging Conda environment '${CONDA_DEFAULT_ENV}'. To disable, call 'conda-stage --auto-stage=disable'"
    conda-stage --stage ${opts[*]} ${conda_pack_opts[*]}
    export CONDA_STAGE_AUTOSTAGED=true
else
    >&2 echo "WARNING: Cannot auto-stage Conda environment '\${CONDA_DEFAULT_ENV}', because 'conda-stage' not found"
fi

\${CONDA_STAGE_DEBUG:-false} && >&2 echo "${file} ... done"
EOF
          assert_file_exists "${file}"
          mdebug "${file}: $(echo; cat "${file}")"
  
          file=${path}/000.conda-stage-auto.sh
          if $debug; then
              cat > "${file}" << EOF
## Disabled?
\${CONDA_STAGE:-true} || return 0

\${CONDA_STAGE_DEBUG:-false} || return 0
>&2 echo "${file} ..."
env | grep -E "(CONDA)" | sort >&2
command -v conda-stage > /dev/null && conda-stage --version
>&2 echo "${file} ... done"
EOF
              assert_file_exists "${file}"
              mdebug "${file}: $(echo; cat "${file}")"
          else
              if [[ -f "${file}" ]]; then
                  rm "${file}"
                  [[ -f "${file}" ]] && merror "Failed to remove file: ${file}"
              fi
          fi
          minfo "Enabled auto-staging"
      else
          if [[ -f "${file}" ]]; then
              rm "${file}"
              [[ -f "${file}" ]] && merror "Failed to remove file: ${file}"
          fi
          minfo "Disabled auto-staging"
      fi
    fi # autostage
    
    if [[ -n ${autounstage} ]]; then
      mdebug "- autounstage=${autounstage}"
  
      path=${CONDA_PREFIX}/etc/conda/deactivate.d
      mdebug "- path=${path}"

      ## Based on observations, 'conda deactivate' processes
      ## deactivate.d/* scripts in reverse lexicographic order.
      ## Because of this, the "unstage" file should be named
      ## so that it is to be process at the very end, because
      ## it will removed all files, including sibling files.
      file=${path}/000.conda-stage-auto.sh
      mdebug "- file=${file}"
  
      if [[ "${autounstage}" == "enable" ]]; then
          make_dir "${path}"
  
          cat > "${file}" << EOF
## Disabled?
\${CONDA_STAGE:-true} || return 0

## Prevent recursive unstaging on deactivation
if \${CONDA_STAGE_AUTOUNSTAGED:-false}; then
    unset CONDA_STAGE_AUTOUNSTAGED
    return 0
fi

## Can only unstage staged environments
\${CONDA_STAGE_STAGED:-false} || return 0

\${CONDA_STAGE_DEBUG:-false} && >&2 echo "${file} ..."

if command -v conda-stage > /dev/null; then
    \${CONDA_STAGE_DEBUG:-false} && >&2 echo "Auto-unstaging Conda environment '${CONDA_DEFAULT_ENV}'. To disable, call 'conda-stage --auto-unstage=disable' before 'conda deactivate'"
    export CONDA_STAGE_AUTOUNSTAGED=true
    conda-stage --unstage
    unset CONDA_STAGE_STAGED
    unset CONDA_STAGE_AUTOUNSTAGED
else
    >&2 echo "WARNING: Cannot auto-unstage Conda environment '\${CONDA_DEFAULT_ENV}', because 'conda-stage' not found"
fi

\${CONDA_STAGE_DEBUG:-false} && >&2 echo "${file} ... done"
EOF
          assert_file_exists "${file}"
          mdebug "${file}: $(echo; cat "${file}")"

          file=${path}/zzz.conda-stage-auto.sh
          if $debug; then
              cat > "${file}" << EOF
## Disabled?
\${CONDA_STAGE:-true} || return 0

\${CONDA_STAGE_DEBUG:-false} || return 0
>&2 echo "${file} ..."
env | grep -E "(CONDA)" | sort >&2
>&2 echo "${file} ... done"
EOF
              assert_file_exists "${file}"
              mdebug "${file}: $(echo; cat "${file}")"
          else
              if [[ -f "${file}" ]]; then
                  rm "${file}"
                  [[ -f "${file}" ]] && merror "Failed to remove file: ${file}"
              fi
          fi
          minfo "Enabled auto-unstaging"
      else
          if [[ -f "${file}" ]]; then
              rm "${file}"
              [[ -f "${file}" ]] && merror "Failed to remove file: ${file}"
          fi
          minfo "Disabled auto-unstaging"
      fi
  
      ## Installed auto-unstaging to original environment?
      if [[ ! -f "${CONDA_PREFIX}/.conda-stage" ]]; then
          file=$(conda_pack_cache_file)
          if [[ -f "${file}" ]]; then
              rm "${file}"
              [[ -f "${file}" ]] && merror "Failed to remove file: ${file}"
              minfo "Removed outdated 'conda-pack' tarball"
          fi
      fi
    fi # autounstage
    
    exit 0
fi


if [[ "${action}" == "unstage" ]]; then
    minfo "Unstaging and reverting to original Conda environment  ..."
    ## Assert that we are working with a staged environment
    if [[ -z ${CONDA_PREFIX} ]]; then
        merror "Does not look like a staged environment: CONDA_PREFIX is not set"
    fi
    assert_dir_exists "${CONDA_PREFIX}"

    if [[ ! -f "${CONDA_PREFIX}/.conda-stage" ]]; then
        merror "Does not look like a staged environment: No '${CONDA_PREFIX}/.conda-stage' file found"
    fi

    mdebug "- Staged Conda environment: ${CONDA_PREFIX}"

    t0=$SECONDS
    minfo "Preparing removal of staged files: ${CONDA_PREFIX}"
    ## In case it's a read-only staged folder, unlock it
    chmod -R u+w "${CONDA_PREFIX}"
    
    cmd="CONDA_STAGE_ACTION=unstage"
    cmd="${cmd}; conda deactivate"
    cmd="${cmd}; rm -rf \"${CONDA_PREFIX}\""
    cmd="${cmd}; unset CONDA_STAGE_AUTOSTAGED"
    mdebug "Command to deactivate and remove staged Conda environment: $cmd"
    echo "$cmd"

    minfo "Deactivating and removing staged Conda environment: ${CONDA_PREFIX}"

    dt=$((SECONDS - t0))
    minfo "Total unstage time: ${dt} seconds"
    
    exit 0
fi

if [[ "${action}" == "stage" ]]; then
    minfo "Staging current Conda environment (${CONDA_PREFIX}) to local disk ..."
    mdebug "- Using conda-stage $(version)"

    ## Already done?
    file=$(conda_pack_cache_file)
    if ! $force && [[ -f "${file}" ]]; then
        if is_conda_pack_cache_file_uptodate; then
            mdebug "conda-pack file exists and is up to date: ${file}"
        else
            mdebug "conda-pack file exists, but is out to date: ${file}"
            minfo "Re-packing out-of-date package tarball ($(file_info "${file}"))"
            force=true
        fi
    fi
    
    conda_env_name=${CONDA_DEFAULT_ENV}    
    conda_pack_cache_file=$(conda_pack)
    exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        exit "$exit_code"
    fi

    ## Warn about pkgs/ in Conda environment
    ## https://github.com/conda/conda-pack/issues/112
    if [[ -d "${CONDA_PREFIX}/pkgs/" ]]; then
          mwarn "Detected a pkgs/ folder *local* to the Conda environment, which is unusal. That folder will *not* be staged to local disk, cf. https://github.com/conda/conda-pack/issues/112: ${CONDA_PREFIX}/pkgs/"
    fi
    
    if [[ -z $path ]]; then
        path=$(mktemp --directory --tmpdir="${TMPDIR}" conda-stage-XXXX)
        path=${path}/${conda_env_name}
    fi
    if [[ -d "${path}" ]]; then
        merror "Stage folder must not exist: ${path}"
    fi
    mdebug "- Stage path: ${path}"

    minfo "Extracting $(file_info "${conda_pack_cache_file}") to ${path}"
    t0=$SECONDS
    ## Create stage folder so it's blocked while we extract
    make_dir "${path}"
    ## Extract atomically, i.e. write to temporary folder and rename
    make_dir "${path}.tmp"
    tar -xf "${conda_pack_cache_file}" -C "${path}.tmp"
    chmod -R u+w "${path}.tmp"
    dt=$((SECONDS - t0))
    minfo "Total extract time: ${dt} seconds"
    
    ## Disable any conda-stage activate.d/ scripts
    path_d=${path}.tmp/etc/conda/activate.d
    minfo "Disable any ${path_d/.tmp}/*.conda-stage-auto.sh scripts"
    if [[ -d "${path_d}" ]]; then
        for ff in "${path_d}"/*.conda-stage-auto.sh; do
            echo "# Disabled in staged Conda environments" > "$ff"
        done
    fi
    
    remove_dir "${path}"
    mv "${path}.tmp" "${path}"

    ## Record original Conda environment
    echo "${CONDA_PREFIX}" > "${path}/.conda-stage"

    minfo "Activating staged environment"
    t0=$SECONDS
    # shellcheck source=/dev/null
    CONDA_STAGE_ACTION=activate source "${path}/bin/activate"
    minfo "Unpacking (relocating)"
    conda-unpack
    dt=$((SECONDS - t0))
    minfo "Total 'conda-unpack' time: ${dt} seconds"

    ## Set CONDA_STAGE environment variables when activated
    path_d=${path}/etc/conda/activate.d
    make_dir "${path_d}"
    file=${path_d}/conda-stage-envs.sh
    echo "export CONDA_STAGE_STAGED=true" > "$file"

#    path_d=${path}/etc/conda/deactivate.d
#    make_dir "${path_d}"
#    file=${path_d}/conda-stage-envs.sh
#    echo "unset CONDA_STAGE_STAGED" > "$file"

    ## Set the conda prompt used by PS1 prompt (optional)
    conda config --env --set env_prompt "(${conda_env_name}*) "
    
    if ! $writable; then
        minfo "Making staged environment read-only (use --writable to disable)"
        chmod -R ugo-w "${path}"
    fi

    cmd="CONDA_STAGE_ACTION=activate"
    cmd="${cmd}; conda deactivate" ## do not revert back to original env
    cmd="${cmd}; conda activate \"${path}\""
    mdebug "Command to activate staged Conda environment: $cmd"
    echo "$cmd"
    
    minfo "Activating staged Conda environment: ${path}"
    exit 0
fi
